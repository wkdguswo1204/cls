day02
	폴더 설명
		
		일반적인 프로젝트와 폴더의 사용 방법은 동일하다.
		Java Resource는 자바 코드가 위치해야될 폴더이고(컨트롤러, 유틸리티 클래스...)
		
		src/main/webapp 는 JSP 요소들이 위치해야할 폴더이다.
		
		src/main	- 실제 실행되어야할 프로그램이 위치해야할 폴더
		src/test	- 단위테스트 등과 같은 테스트 목적의 프로그램이 위치하는 폴더
		
		
		참고 ]
			src/main 하위에 jsp 파일을 바로 저장할 수도 있다.
			
---------------------------------------------------------------------------------------

	경로 정리
		/src/main/webapp				- 바로 접근할 수 있는 폴더
		
		/src/main/webapp/WEB-INF/views	-	컨트롤러에서 접근가능한 폴더
		
		
참고 ]
	서버가 기동되는 순간
		설정파일 로딩순서
			1. server web.xml
			2. WEB-INF/web.xml	: 서블릿 등록
			3. WEB-INF/spring/root-context.xml - mybatis-config.xml
------------------------------------------------------------------------------------------------

스프링에서 MVC 프로젝트 셋팅
	
	1. 서블릿 등록
		WEB-INF/web.xml 에서 작업한다.
		
		<servlet>
			<servlet-name>appServlet</servlet-name>
			==> 만드는 서블릿의 부여하는 이름을 정하는 태그
			
			<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
			==> 이 서블릿에서 사용할 클래스 지정하는 태그
				JSP 프로젝트에서는 먼저 서블릿 클래스를 만들어 등록하고 작업을 했지만
				스프링에서는 미리 만들어진 서블릿을 사용하면 된다.
				
			<init-param>
				<param-name>contextConfigLocation</param-name>
				<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
				==> 지정한 서블릿 클래스의 환경 설정을 담당할
					xml 파일을 지정하는 부분
					(파일이름은 마음대로 변경 가능하다. 
						단, 해당 경로에 반드시 동일한 이름의 파일이 존재해야 한다.)
					
			</init-param>
			<load-on-startup>2</load-on-startup>
			==> 서블릿이 행동할 우선 순위를 지정하는 태그
				우리는 .cls 로 요청되는 요청을 우선 처리하기로 했으므로
				이 서블릿을 우선순위를 두번째로 변경을 했다.
		</servlet>
		
		
	참고 ]
		하나의 프로젝트에 서블릿은 여러개 만들 수 있다.
		그리고 각각의 서블릿은 다른 요청을 처리하도록 할 수 있다.
		
		예를 들어
		유저용 서블릿, 관리자용 서블릿을 따로 만들어서
		각각이 다른 요청을 처리하도록 할 수 있다.
		
		다만 이때는 서블릿이름과 환경 설정 파일의 이름을
		각각 다르게 해야한다.
		
	2. URL 패턴을 지정한다.
		==> 등록한 서블릿이 어떤 요청을 받았을 때 실행할지를 지정하는 부분
			
			이것은 서블릿 등록과 반드시 한쌍으로 만들어야 한다.
			
		<servlet-mapping>
			<servlet-name>appServlet</servlet-name>
			<url-pattern>/</url-pattern>
		</servlet-mapping>
		
참고 ]
	
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/spring/root-context.xml</param-value>
	</context-param>
	==> web.xml 파일에서 환경설정을 하는데 있어서
		내용이 복잡해질 것을 대비해서
		보조 환경 설정 파일을 지정하는 부분
		주로 데이베이스 작업에 관련된 설정이 들어가는 파일이다.
		
		web.xml에서 모든 설정을 해도 된다.

-----------------------------------------------------------------------------------------------
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	==> 필터 처리를 하기 위해서 필터 분석 도구를 등록하는 부분
		스프링에서 강력하게 요청하는 기능이 몇가지 있는데
		그 기능을 처리하기 위해서 필요한 분석도구를 등록하는 부분
		
참고 ]
	web.xml에 모든 설정을 기록한다면 이 파일의 내용이 엄청나게 복잡해질 것이다.
	따라서 필요한 설정이 있다면(기본설정외에) xml 파일을 만들고 web.xml에 등록해주면 되겠다.
	
		
================================================================================================

	컨트롤러 제작
		==>	스프링은 요청에 따라서 컨트롤러를 제작하지 않는다.
			요청에 따라서 함수를 제작할 뿐이다.
			
			따라서 컨트롤러 개수는 몇개가 되어도 상관이 없다.
			
			환경 설정파일에 등록된 위치를 기본 베이스로 해서
			그 하위에 만들어주면 된다.
			
		참고]
			베이스 패키자만 지키면 그 하위에 몇단계가 되던지 
			아무런 상관이 없다.
			
			
----------------------------------------------------------------------
경로
	
	1. 로그인 폼 요청
		http://localhost/cls/member/login.cls
		
	2. jquery 라이브러리
		http://localhost/cls/js/jquery-3.5.0.min.js
		
		../js/jquery-3.5.0.min.js

	==> /cls/js/jquery-3.5.0.min.js
	
-------------------------------------------------------------------------

*****
중요
	
	스프링은 요청을 함수 단위로 등록해서 사용하게 된다.
	즉, 각각의 함수가 언제 실행될지(어떤 요청이 왔을 때 실행될지)를
	지정해 줌 으로써 함수 단위로 요청을 처리하도록 제작한다.
	
	따라서 함수를 제작을 할 때 현재 제작하는 함수가 어떤 요청이 왔을 때 
	실행 될지를 지정해 줘야한다.
	
	명령
		
			@RequestMapping
			
	형식
		
		*****
		1. 하나의 요청을 처리하는 방법
		
			@RequestMapping("/요청내용")
			
			예]
				@RequestMapping("/member/login.cls")
				
				<== http://localhost/cls/member/login.cls
				
		2. 여러개의 요청을 함수 하나가 처리하는 방법
			
			@RequestMapping(path={"요청내용1", "요청내용2", ...})
			
			
			예]
				@RequestMapping(path={"/Login.cls", "/Join.cls"})
				
		3. 요청방식에 따라 달라지는 방법
			==> GET 또는 POST 방식에 따라서 달라지는 방법
			
			@RequestMapping(method=RequestMethod.POST)
			
			예]
				@RequestMapping(value="/loginProc.cls", method=RequestMethod.POST)

		4. 파라미터 존재 여부에 따라 달라지는 방법
			==> 특정 파라미터가 존재하는 경우에 한해서 
				함수를 실행하도록 하는 방법
				
			@RequestMapping(params="키값")
			
			예]
				@RequestMapping(params="nowPage")
				==> nowPage라는 파라미터가 존재하는 경우 이 함수를 실행하세요...
				
		5. 여러 파라미터의 존재 여부에 따라 달라지는 방법
			@RequestMapping(params={"키값1", "키값2", "키값3", ...})
		
			예]
				@RequestMapping(params={"nowPage", "id"})
			
		6. 파라미터의 값이 특정 값인지에 따라서 달라지는 방법
			@RequestMapping(params="키값=데이터")
		
			예]
				@RequestMapping(params="id=dDragon")
				
				
	### 이상 여섯가지 방법이 혼합되어서 사용되어진다.
		혼합 방식은 , 를 이용해서 6가지중 필요한 요소를 등록해서 사용하면 된다.
-------------------------------------------------------------------------------------------
참고 ]
	와일드 카드를 이용한 요청 처리
	==> 여러 요청을 하나의 함수가 실행되도록 하는 방법의 일종으로
		* 문자를 이용해서 처리하는 방법
		
		예 ]
			@RequestMapping("/board*")
			==> /board로 시작하는 모든 요청은 뒤에 어떤요청이던지 이 함수에서 처리하겠다.
			
	value 를 이용한 요청 처리
		==>	1번 형식의 오리지날 형식으로
			
			예 ]
				@RequestMapping(value="/board/boardList.cls")
				
	*
	스프링은 요청에 대한 매핑이 클래스단위가 아니고 함수 단위로 처리를 하지만
	프로그램을 제작하다 보면
	특정 컨트롤러 내에 있는 함수는 공통 기능을 가지게 될 것이다.
	
	예를 들자면
	로그인페이지 보기 요청이나
	로그인 처리 요청 또는
	회원가입 페이지 보기 요청, 회원가입 처리 요청 등등 의 요청은
	아마도 요청에 대한 매핑을 
		/member/login.cls
		/member/loginProc.cls
		/member/join.cls
		/member/joinProc.cls
	의 형식으로 매핑이 될 것인데
	이때 공통적으로 /member가 붙게 된다.
	이럴 경우
	함수에서 다시 타이핑하기 구찮으니까
	함수를 포함하는 클래스에다 공통 요청내용을 적어주면 
	함수에서는 그부분은 생략을 할 수 있다.
		
	
-------------------------------------------------------------------------------------------
문제 1]
	/Board/BoardList.cls 로 요청하고
	orino가 존재할 경우에 한해서 특정함수를 실행하고자 할 경우
	요청 매핑을 작성하세요.
	
문제 2]
	/Board/BoardList.cls 로 요청하ㅣ고
	orino가 존재하지 않는 경우에 한해서 
	특정함수를 실행하고자 할 경우......
	
--------------------------------------------------------------------------------------------


















