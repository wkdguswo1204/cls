# day04

DI(Dependency Injection)
==> 의존 주입이라고 번역을 하고
	어떤 클래스를 사용하는데 있어서 스스로 new 시키지 않고
	다른 곳에서 new 시킨것을 받아서 사용하는 방법
	
	스프링에서는 빈처리라고 하여
	xml 파일에서 직접 필요한 클래스를 new 시키는 기능을 가지고 있다.
	
	예]
		<bean id="workRunner"
				class="net.madvirus.spring.WorkRunner" />
				
		==> WorkRunner workRunner = new WorkRunner();
		효과를 가지게 된다.
		
		이처럼 xml 파일을 이용해서 new 된 것을 필요한 자바 소스에서
		가지고 와서(의존주입 해서) 사용할 수 있다.
		
---------------------------------------------------------------------------------------------------
자동 의존 주입
	==> bean 처리된 클래스를 필요한 곳에
		어노테이션을 이용해서 자동적으로 생성된 클래스를 사용가능하도록 하는 것.
		
		@Autowired
		==> 모든 bean 처리된 클래스를 자동으로 찾아서 주입하는 어노테이션
		
		@Qualifier
		==> 동일한 클래스가 여러번 bean 처리된 경우에 
			특정 클래스를 선택하도록 하는 어노테이션
			
		@Resource
		==> 자동 주입할 클래스를 지정해서 주입하도록 하는 어노테이션
		
		
	참고 ]
		
		@Autowired
		==> 스프링에서 사용하는 자동의존주입
		@Inject
		==> 자바어플리케이션에서도 사용할 수 있고 물론 스프링에서도 사용가능하다.
		
		
	참고 ]
		@Autowired를 사용할 수 있는 지점
			1. 변수 생성해서 사용할 수 있다.
			2. 생성자 함수에서 사용할 수 있다.
			3. set 함수에서 사용할 수 있다.
			
		==> 위셋중 어디서 사용하던지 필요한 클래스가 자동 주입되는 것은 동일한 효과를 가진다.
		
	*
	주의 ]
		@Autowired 는 선언한 다음줄에 한해서만 효과를 가진다.
		
		==> 예]
				@Autowired
				MemberDAO mDAO;	==> 자동 의존 주입
				BoardDAO bDAO;	==> 그냥 전역 변수
				==>
					@Autowired
					MemberDAO mDAO;	==> 자동 의존 주입
					@Autowired
					BoardDAO bDAO;	==> 자동 의존 주입
					
----------------------------------------------------------------------------------------------------
	<bean id="memberDAO" class="com.increpas.cls.dao.MemberDAO" />
	<bean id="mDAO" class="com.increpas.cls.dao.MemberDAO" />
		==> 
			MemberDAO memberDAO = new MemberDAO();
			MemberDAO mDAO = new MemberDAO();
	------------------------------------------------------------------------------------------------
	<bean id="memberDAO" class="com.increpas.cls.dao.MemberDAO" />
	<bean id="print1" class="com.increpas.cls.util.MemberPrint">
		<qualifier value="sysout" />
	</bean>
	<bean id="print2" class="com.increpas.cls.util.MemberPrint">
	
	==> 
	
	public class MemberInfoPrint {
		
		@Autowired
		public MemberInfoPrint(MemberDAO mDAO, @Qualifier("sysout") MemberPrint print){
		}
		==> 의 방식으로 특정 bean을 선택할 수 있게 된다.
	}
	
	참고 ]
		@Autowired 를 사용한 경우
		자동으로 bean을 찾아서 자동 주입을 해주게 된다.
		반대로 이야기하면 해당 bean을 찾지 못하면 에러가 발생한다.
		
		이런 경우를 대비해서 만약 bean을 찾지 못하더라도
		에러없이 진행을 시킬수 있는 방법( ==> 자동의존주입은 안된다. )
		
		형식 ]
			
			@Autowired(required=false)
			
			
---------------------------------------------------------------------------------------------------

@Resource에 의한 자동 의존 주입
	==> @Autowired 보다는 강력하지 않고
		다만 bean 처리된 것중에서 특정한 bean을 선택해서
		자동 의존 주입하는 기능이다.
		
	형식 ]
		@Resource(name="bean ID 값")
		변수선언
		
		생성자
		setXXXXX()
		
	참고 ]
		@Resource에서 원하는 빈을 찾는 원리
			1. name에 지정한 값과 동일한 id를 가진 bean을 찾아서 자동 의존 주입을 한다.
			2. 만약 id가 동일한 것이 없을 경우에는
				클래스이름을 이용해서 bean을 찾아서 자동 의존 주입을 한다.
			3. 만약 같은 이름이 중복되면 에러가 발생한다.
				( 이런 경우는 @Qualifier를 이용해서 구분 처리할 수도 있다.)
	
	
---------------------------------------------------------------------------------------------------

	명시적 의존 주입과 묵시적 자동 의존 주입이 같이 존재하는 경우에는
	명시적 의존 주입을 우선으로 사용한다.
	
	예 ]
		<bean id="mDAO" class="com.increpas.cls.dao.MemberDAO" />
		
		<bean id="print" class="com.increpas.cls.util.MemberPrint" />
		<bean id="print2" class="com.increpas.cls.util.MemberPrint" />
		
		<bean id="infoPrint" class="com.increpas.cls.util.MembInfoPrint">
			명시적으로 set 함수를 이용해서 의존 주입을 시킨다.
			<property name="print" ref="print2" />
		</bean>
		
		
	==>
		public class MemberInfoPrint {
			@Autowired
			private MemberDAO mDAO;
			@Autowired
			private MemberPrint print;
			==> 명시적으로 print를 이용해서 의존 주입을 시켰기 때문에 
				print2 가 의존 주입이 된다.
		}
				
-----------------------------------------------------------------------------------------------------

	XML 파일
		
		xml 파일은 원칙적으로 태그이름이 아무렇게나 사용되어도 된다.
		(xml : extensible Markup Language 의 약자 )
		
		아무렇게나 태그이름을 사용하면
		이 xml 파일을 이용해서 누군가(스프링) 사용한다면 그 의미를 알수 없다.
	
		그래서 태그의 의미를 지정한 문서가 따로 있는데...
		(이 xml 파일에서는 이런 태그만 사용하세요...)
		이런 문서를 DTD, 스키마 문서라고 이야기 한다.
		
		즉, 스키마나 DTD를 추가한다는 의미는
		해당 xml 파일에서 사용할 수 있는 태그의 종류를 지정한다는 의미이다.
		
		스키마나 DTD를 추가하는 방법
			1. 네임 스페이스를 지정한다.
				
				네임 스페이스를 지정한다는 의미는
				각각의 스키마가 태그를 지원하는데 있어서 
				태그이름이 중복 될 수 있다.
				
				해당 태그를 원활하게 사용할 목적으로
				각각의 스키마에 적당한 이름을 부여해서 사용해야 한다.
				이때 부여하는 이름을 네임 스페이스라고 한다.
				
				방법 ]
					
					xmlns:적당한이름
					
				사용 ]
					<적당한이름:태그이름 ... />
				
				==> 의 형식으로 사용하도록 약속함으로써 정확하게 해당 
					스키마의 태그를 사용할 수 있도록 한 것.
					
			2. 해당 스키마 파일이나 DTD 파일을 지정한다.
				==> 실제로 그 태그를 사용한 경우 파싱을 담당할 스키마를 지정해준다.
				

--------------------------------------------------------------------------------------------------
	mybatis 연동
	==> 데이터베이스 처리를 좀더 편하게 도와주는 프레임워크의 일종이다.
		커넥션 풀에서 커넥션을 얻어오는 방법
		질의 명령 생성을 좀더 편하게 해주고
		질의를 실행해서 Model을 작성하는 방법 등등으로
		개발자의 손을 거치지 않고 실행해주는 기능을 가지고 있다.
		
		
	1. 셋팅 ]
		
		0. myBatis 처리를 위한 라이브러리를 등록
		1. myBatis 환경 설정
			==> 환경 설정 파일의 경로와 이름만 지정하고
				실제 환경 설정은 해당 xml 파일을 이용해서 환경 설정을 한다.
				이 파일의 위치는 어디에 둬도 상관 없다.
				
				우리는
					/resources/mybatis-config.xml
				파일을 만들어서 내용을 작성한다.
		2. myBatis에서 제공하는 커넥션 풀을
			DI 기법으로 가지고 오도록 처리해 준다.
			
	2. 데이터베이스 처리를 하기 위해서는 기본적으로 질의 명령이 필요하다.
		myBatis에서는 질의명령만 모아서 관리하는 방식을 사용한다.
		
		이때 myBatis에서 질의 명령만 모아놓은 방식은 
		xml 파일을 이용하는 방식을 사용하고 있다.
		
		**
		xml 파일의 이름과 경로는 사용자가 정하는 것이고
		myBatis환경 설정 파일에 등록만 해주면 된다.
		==> 이 과정을 "Mapping" 시킨다 라고 표현한다.
		
		ORM(Object Relation Mapping) 의 한종류로 구분하기도 하지만
		일반적으로 ORM과는 구분시켜서 Mapper라 부르는 것이 일반적이다.
		
	3. DAO 클래스 만든다.
		==> 일반 클래스로 만들면 되는데...
			질의명령을 실행할 목적을 가지고 있으므로
			당연히 커넥션이 필요할 것이다.
			
			따라서 환경설정에서 등록해 놓은 세션(SqlSessionTemplate)을 자동 의존 주입 해 놓는다.
			
			
----------------------------------------------------------------------------------------------------
	참고 ]
		질의 명령 xml에서
		resultType 을 설정하는 방법
			***
		==> 한 행의 데이터를 담을 수 있는 타입만 생각하면 된다.
			여러줄이 결과로 만들어 지더라도
			여러줄의 데이터를 담을 List는 한 행 데이터를 담은 타입으로 
			마이바티스의 함수가 만들어주기 때문에..... 
	
	
	*****
	참고 ]
		작성된 SQL 파일은 반드시 mapping 시켜야 사용할 수 있다.
		이 작업은 myBatis 환경 설정 파일에서 처리한다.
		
		작성된 DAO는 컨트롤러에서 사용할 것이고
		당연히 컨트롤러에서 자동의존주입으로 처리를 하고 사용할 것이다.
		<== bean 처리를 해놓았기 때문에....
		
		이 작업은 우리는 cls-servlet.xml 에서 daoContext.xml 파일을 읽어와서 
		처리하는 것으로 했다.
		
----------------------------------------------------------------------------------------------------

*****
POST 방식으로 넘어오는 한글 깨짐 방지 필터링 처리
		
	
	
	
	
	
	
	
	
	
	